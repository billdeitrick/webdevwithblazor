@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@rendermode InteractiveServer
@inject IBlogApi _api
@inject NavigationManager _manager
@using Markdig
@using SharedComponents.ReusableComponents
@using Microsoft.AspNetCore.Components.Forms;

<h3>Edit Post</h3>

<EditForm Model="Post" OnValidSubmit="SavePost">
    <DataAnnotationsValidator/>
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider"/>
    <BlogNavigationLock @ref="NavigationLock"></BlogNavigationLock>
    
    <InputText @bind-Value="Post.Title"/>
    <ValidationMessage For="() => Post.Title"/>
    <InputDate @bind-Value="Post.PublishDate"/>
    <ValidationMessage For="() => Post.PublishDate"/>
    <InputSelect @bind-Value="selectedCategory">
        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </InputSelect>
    <ul>
        @foreach (var tag in Tags)
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id))
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Remove(Post.Tags.Single(t => t.Id == tag.Id)); })">Remove</button>
                }
                else
                {
                    <button type="button" @onclick="@(() => { Post.Tags.Add(tag);})">Add</button>
                }
            </li>
        }
    </ul>
    <InputTextAreaOnInput @bind-Value="Post.Text" @onkeyup="UpdateHTML"/>
    <ValidationMessage For="()=>Post.Text"/>
    <BlogButton Type="BlogButton.ButtonType.Save">Save</BlogButton>
    
</EditForm>

@((MarkupString)markDownAsHtml)

@code {

    [Parameter] public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = new();
    List<Tag> Tags { get; set; } = new();
    string? selectedCategory = null;
    string? markDownAsHtml { get; set; }
    MarkdownPipeline pipeline = default;
    BlogNavigationLock? NavigationLock { get; set; }

    protected override Task OnInitializedAsync()
    {
        pipeline = new MarkdownPipelineBuilder()
            .UseEmojiAndSmiley()
            .Build();

        return base.OnInitializedAsync();
    }

    protected async Task SavePost()
    {

        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c => c.Id == selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
        }

        await _api.SaveBlogPostAsync(Post);
        
        NavigationLock?.CurrentEditContext.MarkAsUnmodified();
        _manager.NavigateTo("/admin/blogposts");
        
    }

    protected void UpdateHTML()
    {
        markDownAsHtml = Markdown.ToHtml(Post.Text, pipeline);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var p = await _api.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Category != null)
                {
                    selectedCategory = Post.Category.Id;
                }

                UpdateHTML();
            }

            Categories = (await _api.GetCategoriesAsync());
            Tags = (await _api.GetTagsAsync());
            base.OnParametersSet();
        }
    }

}